Database:
  Paths:
    # All paths assumed to be relative to db_root/YYYY/SiteID/ e.g., C:/Users/User/Database/YYYY/SiteID/
    # (see by "Biomet.net/R/database_functions/db_root.R")
    SecondStage: Clean/SecondStage
    ThirdStage: Clean/ThirdStage
    ThirdStage_Default: Clean/ThirdStage_Default_Ustar
    ThirdStage_Advanced: Clean/ThirdStage_Full_Ustar_Uncertainty
    FirstStage:
      Met:
        raw: Met
        clean: Met/clean
      Flux:
        raw: Flux
        clean: Flux/clean
      Manual: 
        raw: Met/Manual
        clean: Met/clean
      ECCC:
        # Station IDs see: _ECCC_Station_List.csv
        raw: ECCC/STN_ID
        clean: Met/clean
  Timestamp: 
    name: clean_tv
    dtype: float64
    precision: 8
    base: 719529
    base_unit: D
  Traces:
    dtype: float32
    precision: 4
Processing:
  ThirdStage:
    Fluxes:
      # Names of flux variables as they come in from second stage
      H: H
      LE: LE
      NEE: FC
      FCH4: FCH4
    Met_Gap_Filling:
      Linear_Interpolation:
        maxgap: 3
        Fill_Vars: TA_1_1_1,RH_1_1_1,VPD_1_1_1
    Standard_cleaning:
      # Filter out values  #+/- wakeFilter of northOffset +/- 180 degrees
      wakeFilter: 30
      precipCutOff: 0
    Storage_Correction:
      # Will be named acceding to the key, calculated as the sum of the nested key/value pair
      # Gives option to rename flux (e.g., NEE) or just "overwrite"
      # Default behavior is to apply storage correction, but can be "turned off" in site-specific configs
      # If not applied, will still copy/re-name according to nested key values, because for example, REddyProc expects NEE
      NEE:
        FC: SC
      FCH4:
        FCH4: SCH4
      H:
        H: SH
      LE:
        LE: SLE
    JS_Moving_Z: 
      #creates a sliding window z-score for outlier detection
      # z = (F-mean(F,na.rm=TRUE))/sd(F,na.rm=TRUE)
      # where z is calculated using a sliding symmetric window in days, e.g. (45 days = +/- 91 day in total, centered on observation)
      window: 45
      z_thresh: 4
    # Night_Time_min_NEE:
    Papale_Spike_Removal:
      # creates a sliding window MAD for outlier detection
      window: 6
      # conservative value as per literature
      z_thresh: 4
    REddyProc:
      Ustar_filtering:
        # Keep "run_defaults" as True to run "fast" ustar filtering
        # If run_defaults != True, conduct "full_uncertainty" 
        run_defaults: True
        default_uncertainty:
        # Default to calculate U05, U50, & U95
          samples: 100
          min: 0.05
          max: 0.095
          steps: 3 
        # EProc$sEstimateUstarScenarios(nSample = samples, probs = seq(min_quantile,max_quantile,length.out = steps))
        # See Appendix B5 Wutzler (2018)
        full_uncertainty:
          samples: 200
          min: 0.025
          max: 0.0975
          steps: 39 
      vars_in:
        # Variables to feed to REddyProc (from second stage)
        # Key is REddyProc name, val is database name (or previous output from up the processing chain)
        # year,doy,and HHMM are autogenerated in script)
        # Any variable listed here 
        # Fluxes will be whatever the most "up to date" filtered variable is
        # e.g., NEE is Storage corrected, spikes removed (Papale 2006), etc.
        NEE: NEE
        LE: LE
        H: H
        FCH4: FCH4
        Rg: SW_IN_1_1_1
        Tair: TA_1_1_1
        # rH: RH_1_1_1
        VPD: VPD_1_1_1
        Ustar: USTAR
        season: season
      # MDS gap filling (will only fill these variables *if* present in "vars_in")
      MDSGapFill:
        UStarScens:
          - NEE
          - LE
          - H
          - FCH4
        basic: 
          - Rg
          - Tair
          # - rH
          - VPD
      saveBySuffix:
        # All_ReddyProc outputs are saved to intermediate step, only those with suffixes listed will be saved to "final" third stage folder
        - uStar_orig # ustar filtered values
        - uStar_f # filled (with MDS) after filtering
        - uStar # Incudes key variables modeled variables from partitioning

    RF_GapFilling:
      Run: False
      # Specify the interval for re-training RF models
      retrain_every_n_months: 1
      # Example showing how configuration could be setup.  Not ideal set of inputs in all cases
      # SW_IN_ TA, & VPD are ReddyProc MDS inputs
      # Lots of pending optimizations to be made to RF approach 
      # Example set of predictors (NOT OPTIMIZED!!!!!!!) 
      # Variables with an _f at the end have been gap-filled using MDS in REddyProc
      Models:
        # Each key corresponds to a model, key corresponds to name of filled variable
        # When saved as the model output, the variable will be appended with a tag
        # e.g., FCH4_RF_f (gap filled w/ random forest) and FCH4_RF_fall (modelled w/ random forest)
        FCH4_PI_F_RF:
          #Full name of the Ustar filtered ReddyProc Variable (cleanest trace) to train model
          var_dep: FCH4_PI_uStar_orig
          Predictors: SW_IN_1_1_1_PI_f,TA_1_1_1_PI_f,VPD_1_1_1_PI_f
        NEE_PI_F_RF:
          # Fill the ReddyProc UStar Filtered Variable
          var_dep: NEE_PI_uStar_orig
          Predictors: SW_IN_1_1_1,TA_1_1_1,VPD_1_1_1
        H_PI_F_RF:
          # Fill the ReddyProc UStar Filtered Variable
          var_dep: H_PI_uStar_orig
          Predictors: SW_IN_1_1_1_PI_f,TA_1_1_1_PI_f,VPD_1_1_1_PI_f
        LE_PI_F_RF:
          # Fill the ReddyProc UStar Filtered Variable
          var_dep: LE_PI_uStar_orig
          Predictors: SW_IN_1_1_1_PI_f,TA_1_1_1_PI_f,VPD_1_1_1_PI_f
